/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2020 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_WIND_LAYER
#define OSGEARTH_WIND_LAYER 1

#include <osgEarth/Layer>
#include <osgEarth/TerrainResources>

namespace osgEarth
{
    class GeoTransform;

    class OSGEARTH_EXPORT Wind : public osg::Referenced
    {
    public:
        enum Type {
            TYPE_POINT,
            TYPE_DIRECTIONAL
        };

        OE_OPTION(Type, type);
        OE_OPTION(float, power);
        OE_OPTION(osg::Vec3d, point);
        OE_OPTION(osg::Vec2f, direction); // local

        Wind();
        Wind(const Config& conf);
        Config getConfig() const;
    };

    /**
     * Layer that managed wind sources and creates a shared wind LUT
     * for shaders to access.
     */
    class OSGEARTH_EXPORT WindLayer : public Layer
    {
    public: // serialization
        class OSGEARTH_EXPORT Options : public Layer::Options {
        public:
            META_LayerOptions(osgEarth, Options, Layer::Options);
            OE_OPTION_VECTOR(osg::ref_ptr<Wind>, winds);
            virtual Config getConfig() const;
        private:
            void fromConfig(const Config& conf);
        };

    public:
        META_Layer(osgEarth, WindLayer, Options, Layer, Wind);

        void addWind(Wind*);

    protected: // Layer

        // post-ctor initialization
        virtual void init();

        virtual osg::Node* getNode() const;

        virtual void setTerrainResources(TerrainResources*);

        osg::StateSet* getSharedStateSet(osg::NodeVisitor* nv) const;

    private:
        osg::ref_ptr<osg::Drawable> _drawable;
        TextureImageUnitReservation _unit;

        // todo: local per camera
        mutable osg::ref_ptr<osg::StateSet> _sharedStateSet;
        double _radius;
    };

} // namespace osgEarth

OSGEARTH_SPECIALIZE_CONFIG(osgEarth::WindLayer::Options);

#endif // OSGEARTH_WIND_LAYER
